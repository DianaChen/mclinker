Index: include/llvm/Target/TargetMachine.h
===================================================================
--- include/llvm/Target/TargetMachine.h	(revision 146714)
+++ include/llvm/Target/TargetMachine.h	(working copy)
@@ -279,6 +279,15 @@
                                  bool /*DisableVerify*/ = true) {
     return true;
   }
+
+  /// addCommonCodeGenPasses - Add standard LLVM codegen passes used for
+  /// both emitting to assembly files or machine code output.
+  ///
+  virtual bool addCommonCodeGenPasses(PassManagerBase &,
+                              bool DisableVerify,
+                              MCContext *&OutCtx) {
+    return true;
+  }
 };
 
 /// LLVMTargetMachine - This class describes a target machine that is
@@ -301,14 +310,13 @@
   ///
   void printAndVerify(PassManagerBase &PM, const char *Banner) const;
 
-private:
+public:
   /// addCommonCodeGenPasses - Add standard LLVM codegen passes used for
   /// both emitting to assembly files or machine code output.
   ///
   bool addCommonCodeGenPasses(PassManagerBase &,
                               bool DisableVerify, MCContext *&OutCtx);
 
-public:
   /// addPassesToEmitFile - Add passes to the specified pass manager to get the
   /// specified file emitted.  Typically this will involve several steps of code
   /// generation.
Index: include/llvm/MC/MCAssembler.h
===================================================================
--- include/llvm/MC/MCAssembler.h	(revision 146714)
+++ include/llvm/MC/MCAssembler.h	(working copy)
@@ -21,6 +21,10 @@
 #include "llvm/Support/DataTypes.h"
 #include <vector> // FIXME: Shouldn't be needed.
 
+namespace mcld {
+class Layout;
+}
+
 namespace llvm {
 class raw_ostream;
 class MCAsmLayout;
@@ -40,6 +44,7 @@
 
 class MCFragment : public ilist_node<MCFragment> {
   friend class MCAsmLayout;
+  friend class mcld::Layout;
 
   MCFragment(const MCFragment&);     // DO NOT IMPLEMENT
   void operator=(const MCFragment&); // DO NOT IMPLEMENT
@@ -53,10 +58,13 @@
     FT_Org,
     FT_Dwarf,
     FT_DwarfFrame,
-    FT_LEB
+    FT_LEB,
+    FT_Region,
+    FT_Reloc,
+    FT_Target
   };
 
-private:
+protected:
   FragmentType Kind;
 
   /// Parent - The data for the section this fragment is in.
@@ -425,6 +433,7 @@
 // keep it out is for API abstraction.
 class MCSectionData : public ilist_node<MCSectionData> {
   friend class MCAsmLayout;
+  friend class mcld::Layout;
 
   MCSectionData(const MCSectionData&);  // DO NOT IMPLEMENT
   void operator=(const MCSectionData&); // DO NOT IMPLEMENT
@@ -438,7 +447,7 @@
   typedef FragmentListType::const_reverse_iterator const_reverse_iterator;
   typedef FragmentListType::reverse_iterator reverse_iterator;
 
-private:
+protected:
   FragmentListType Fragments;
   const MCSection *Section;
 
@@ -466,6 +475,7 @@
   // Only for use as sentinel.
   MCSectionData();
   MCSectionData(const MCSection &Section, MCAssembler *A = 0);
+  virtual ~MCSectionData() {}
 
   const MCSection &getSection() const { return *Section; }
 
@@ -664,7 +674,7 @@
 
   MCCodeEmitter &Emitter;
 
-  MCObjectWriter &Writer;
+  MCObjectWriter *m_pWriter;
 
   raw_ostream &OS;
 
@@ -792,8 +802,10 @@
 
   MCCodeEmitter &getEmitter() const { return Emitter; }
 
-  MCObjectWriter &getWriter() const { return Writer; }
+  MCObjectWriter &getWriter() const { return *m_pWriter; }
 
+  void setWriter(MCObjectWriter &pObjectWriter);
+
   /// Finish - Do final processing and write the object to the output stream.
   /// \arg Writer is used for custom object writer (as the MCJIT does),
   /// if not specified it is automatically created from backend.
Index: include/llvm/MC/MCSection.h
===================================================================
--- include/llvm/MC/MCSection.h	(revision 146714)
+++ include/llvm/MC/MCSection.h	(working copy)
@@ -31,7 +31,8 @@
     enum SectionVariant {
       SV_COFF = 0,
       SV_ELF,
-      SV_MachO
+      SV_MachO,
+      SV_LDContext
     };
 
   private:
Index: include/llvm/Support/ELF.h
===================================================================
--- include/llvm/Support/ELF.h	(revision 146714)
+++ include/llvm/Support/ELF.h	(working copy)
@@ -736,6 +736,13 @@
   SHT_LOOS          = 0x60000000, // Lowest operating system-specific type.
   SHT_HIOS          = 0x6fffffff, // Highest operating system-specific type.
   SHT_LOPROC        = 0x70000000, // Lowest processor architecture-specific type.
+
+  SHT_GNU_ATTRIBUTES = 0x6ffffff5, // Object attributes.
+  SHT_GNU_HASH       = 0x6ffffff6, // GNU style dynamic hash table.
+  SHT_GNU_verdef     = 0x6ffffffd, // Versions defined by file.
+  SHT_GNU_verneed    = 0x6ffffffe, // Versions needed by file.
+  SHT_GNU_versym     = 0x6fffffff, // Symbol versions.
+
   // Fixme: All this is duplicated in MCSectionELF. Why??
   // Exception Index table
   SHT_ARM_EXIDX           = 0x70000001U,
Index: include/llvm/Support/CommandLine.h
===================================================================
--- include/llvm/Support/CommandLine.h	(revision 146714)
+++ include/llvm/Support/CommandLine.h	(working copy)
@@ -341,7 +341,11 @@
 
   bool hasValue() const { return false; }
 
-  const DataType &getValue() const { assert(false && "no default value"); }
+  const DataType &getValue() const {
+    assert(false && "no default value");
+    DataType *p = 0;
+    return *p;
+  }
 
   // Some options may take their value from a different data type.
   template<class DT>
Index: lib/MC/MCAssembler.cpp
===================================================================
--- lib/MC/MCAssembler.cpp	(revision 146714)
+++ lib/MC/MCAssembler.cpp	(working copy)
@@ -157,7 +157,8 @@
 }
 
 MCFragment::MCFragment(FragmentType _Kind, MCSectionData *_Parent)
-  : Kind(_Kind), Parent(_Parent), Atom(0), Offset(~UINT64_C(0))
+  : Kind(_Kind), Parent(_Parent), Atom(0), Offset(~UINT64_C(0)),
+    LayoutOrder(~(0U))
 {
   if (Parent)
     Parent->getFragmentList().push_back(this);
@@ -197,7 +198,7 @@
 MCAssembler::MCAssembler(MCContext &Context_, MCAsmBackend &Backend_,
                          MCCodeEmitter &Emitter_, MCObjectWriter &Writer_,
                          raw_ostream &OS_)
-  : Context(Context_), Backend(Backend_), Emitter(Emitter_), Writer(Writer_),
+  : Context(Context_), Backend(Backend_), Emitter(Emitter_), m_pWriter(&Writer_),
     OS(OS_), RelaxAll(false), NoExecStack(false), SubsectionsViaSymbols(false)
 {
 }
@@ -205,6 +206,11 @@
 MCAssembler::~MCAssembler() {
 }
 
+void MCAssembler::setWriter(MCObjectWriter &pObjectWriter) {
+  delete m_pWriter;
+  m_pWriter = &pObjectWriter;
+}
+
 bool MCAssembler::isSymbolLinkerVisible(const MCSymbol &Symbol) const {
   // Non-temporary labels should always be visible to the linker.
   if (!Symbol.isTemporary())

Index: include/llvm/Target/TargetMachine.h
===================================================================
--- include/llvm/Target/TargetMachine.h	(revision 145348)
+++ include/llvm/Target/TargetMachine.h	(working copy)
@@ -277,6 +277,16 @@
                                  bool = true) {
     return true;
   }
+
+  /// addCommonCodeGenPasses - Add standard LLVM codegen passes used for
+  /// both emitting to assembly files or machine code output.
+  ///
+  virtual bool addCommonCodeGenPasses(PassManagerBase &,
+                              CodeGenOpt::Level,
+                              bool DisableVerify,
+                              MCContext *&OutCtx) {
+    return true;
+  }
 };
 
 /// LLVMTargetMachine - This class describes a target machine that is
@@ -288,14 +298,13 @@
                     StringRef CPU, StringRef FS,
                     Reloc::Model RM, CodeModel::Model CM);
 
-private:
+public:
   /// addCommonCodeGenPasses - Add standard LLVM codegen passes used for
   /// both emitting to assembly files or machine code output.
   ///
   bool addCommonCodeGenPasses(PassManagerBase &, CodeGenOpt::Level,
                               bool DisableVerify, MCContext *&OutCtx);
 
-public:
   /// addPassesToEmitFile - Add passes to the specified pass manager to get the
   /// specified file emitted.  Typically this will involve several steps of code
   /// generation.  If OptLevel is None, the code generator should emit code as
Index: include/llvm/MC/MCAssembler.h
===================================================================
--- include/llvm/MC/MCAssembler.h	(revision 145348)
+++ include/llvm/MC/MCAssembler.h	(working copy)
@@ -53,7 +53,10 @@
     FT_Org,
     FT_Dwarf,
     FT_DwarfFrame,
-    FT_LEB
+    FT_LEB,
+    FT_Region,
+    FT_GOT,
+    FT_PLT
   };
 
 private:
@@ -664,7 +667,7 @@
 
   MCCodeEmitter &Emitter;
 
-  MCObjectWriter &Writer;
+  MCObjectWriter *m_pWriter;
 
   raw_ostream &OS;
 
@@ -791,8 +794,10 @@
 
   MCCodeEmitter &getEmitter() const { return Emitter; }
 
-  MCObjectWriter &getWriter() const { return Writer; }
+  MCObjectWriter &getWriter() const { return *m_pWriter; }
 
+  void setWriter(MCObjectWriter &pObjectWriter);
+
   /// Finish - Do final processing and write the object to the output stream.
   /// \arg Writer is used for custom object writer (as the MCJIT does),
   /// if not specified it is automatically created from backend.
Index: include/llvm/MC/MCSection.h
===================================================================
--- include/llvm/MC/MCSection.h	(revision 145348)
+++ include/llvm/MC/MCSection.h	(working copy)
@@ -31,7 +31,8 @@
     enum SectionVariant {
       SV_COFF = 0,
       SV_ELF,
-      SV_MachO
+      SV_MachO,
+      SV_LDContext
     };
 
   private:
Index: include/llvm/Support/CommandLine.h
===================================================================
--- include/llvm/Support/CommandLine.h	(revision 145348)
+++ include/llvm/Support/CommandLine.h	(working copy)
@@ -339,7 +339,11 @@
 
   bool hasValue() const { return false; }
 
-  const DataType &getValue() const { assert(false && "no default value"); }
+  const DataType &getValue() const {
+    assert(false && "no default value");
+    DataType *p = 0;
+    return *p;
+  }
 
   // Some options may take their value from a different data type.
   template<class DT>
Index: lib/MC/MCAssembler.cpp
===================================================================
--- lib/MC/MCAssembler.cpp	(revision 145348)
+++ lib/MC/MCAssembler.cpp	(working copy)
@@ -197,7 +197,7 @@
 MCAssembler::MCAssembler(MCContext &Context_, MCAsmBackend &Backend_,
                          MCCodeEmitter &Emitter_, MCObjectWriter &Writer_,
                          raw_ostream &OS_)
-  : Context(Context_), Backend(Backend_), Emitter(Emitter_), Writer(Writer_),
+  : Context(Context_), Backend(Backend_), Emitter(Emitter_), m_pWriter(&Writer_),
     OS(OS_), RelaxAll(false), NoExecStack(false), SubsectionsViaSymbols(false)
 {
 }
@@ -205,6 +205,11 @@
 MCAssembler::~MCAssembler() {
 }
 
+void MCAssembler::setWriter(MCObjectWriter &pObjectWriter) {
+  delete m_pWriter;
+  m_pWriter = &pObjectWriter;
+}
+
 bool MCAssembler::isSymbolLinkerVisible(const MCSymbol &Symbol) const {
   // Non-temporary labels should always be visible to the linker.
   if (!Symbol.isTemporary())

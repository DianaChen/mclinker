Index: include/llvm/MC/MCAssembler.h
===================================================================
--- include/llvm/MC/MCAssembler.h	(revision 152063)
+++ include/llvm/MC/MCAssembler.h	(working copy)
@@ -21,6 +21,10 @@
 #include "llvm/Support/DataTypes.h"
 #include <vector> // FIXME: Shouldn't be needed.
 
+namespace mcld {
+class Layout;
+}
+
 namespace llvm {
 class raw_ostream;
 class MCAsmLayout;
@@ -40,6 +44,7 @@
 
 class MCFragment : public ilist_node<MCFragment> {
   friend class MCAsmLayout;
+  friend class mcld::Layout;
 
   MCFragment(const MCFragment&);     // DO NOT IMPLEMENT
   void operator=(const MCFragment&); // DO NOT IMPLEMENT
@@ -53,7 +58,10 @@
     FT_Org,
     FT_Dwarf,
     FT_DwarfFrame,
-    FT_LEB
+    FT_LEB,
+    FT_Region,
+    FT_Reloc,
+    FT_Target
   };
 
 private:
@@ -679,7 +687,7 @@
 
   MCCodeEmitter &Emitter;
 
-  MCObjectWriter &Writer;
+  MCObjectWriter *Writer;
 
   raw_ostream &OS;
 
@@ -807,8 +815,10 @@
 
   MCCodeEmitter &getEmitter() const { return Emitter; }
 
-  MCObjectWriter &getWriter() const { return Writer; }
+  MCObjectWriter &getWriter() const { return *Writer; }
 
+  void setWriter(MCObjectWriter &ObjectWriter);
+
   /// Finish - Do final processing and write the object to the output stream.
   /// \arg Writer is used for custom object writer (as the MCJIT does),
   /// if not specified it is automatically created from backend.
Index: include/llvm/MC/MCSection.h
===================================================================
--- include/llvm/MC/MCSection.h	(revision 152063)
+++ include/llvm/MC/MCSection.h	(working copy)
@@ -31,7 +31,8 @@
     enum SectionVariant {
       SV_COFF = 0,
       SV_ELF,
-      SV_MachO
+      SV_MachO,
+      SV_LDContext
     };
 
   private:
Index: include/llvm/Support/ELF.h
===================================================================
--- include/llvm/Support/ELF.h	(revision 152063)
+++ include/llvm/Support/ELF.h	(working copy)
@@ -736,6 +736,13 @@
   SHT_LOOS          = 0x60000000, // Lowest operating system-specific type.
   SHT_HIOS          = 0x6fffffff, // Highest operating system-specific type.
   SHT_LOPROC        = 0x70000000, // Lowest processor architecture-specific type.
+
+  SHT_GNU_ATTRIBUTES = 0x6ffffff5, // Object attributes.
+  SHT_GNU_HASH       = 0x6ffffff6, // GNU style dynamic hash table.
+  SHT_GNU_verdef     = 0x6ffffffd, // Versions defined by file.
+  SHT_GNU_verneed    = 0x6ffffffe, // Versions needed by file.
+  SHT_GNU_versym     = 0x6fffffff, // Symbol versions.
+
   // Fixme: All this is duplicated in MCSectionELF. Why??
   // Exception Index table
   SHT_ARM_EXIDX           = 0x70000001U,
@@ -1012,6 +1019,9 @@
   PT_SUNW_EH_FRAME = 0x6474e550,
   PT_SUNW_UNWIND   = 0x6464e550,
 
+  PT_GNU_STACK = 0x6474e551, // Stack flags.
+  PT_GNU_RELRO = 0x6474e552, // Read only after relocation.
+
   PT_HIOS    = 0x6fffffff, // Highest operating system-specific pt entry type.
   PT_LOPROC  = 0x70000000, // Lowest processor-specific program hdr entry type.
   PT_HIPROC  = 0x7fffffff  // Highest processor-specific program hdr entry type.
@@ -1087,6 +1097,14 @@
   DT_PREINIT_ARRAY = 32,      // Pointer to array of preinit functions.
   DT_PREINIT_ARRAYSZ = 33,    // Size of the DT_PREINIT_ARRAY array.
 
+  DT_RELACOUNT    = 0X6FFFFFF9, // ELF32_Rela count.
+  DT_RELCOUNT     = 0X6FFFFFFA, // ELF32_Rel count.
+  DT_FLAGS_1      = 0X6FFFFFFB, // Flags_1.
+  DT_VERDEF       = 0X6FFFFFFC, // The address of the version definition table.
+  DT_VERDEFNUM    = 0X6FFFFFFD, // The number of entries in DT_VERDEF.
+  DT_VERNEED      = 0X6FFFFFFE, // The address of the version Dependency table.
+  DT_VERNEEDNUM   = 0X6FFFFFFF, // The number of entries in DT_VERNEED.
+
   DT_LOOS         = 0x60000000, // Start of environment specific tags.
   DT_HIOS         = 0x6FFFFFFF, // End of environment specific tags.
   DT_LOPROC       = 0x70000000, // Start of processor specific tags.
@@ -1102,6 +1120,24 @@
   DF_STATIC_TLS = 0x10  // Reject attempts to load dynamically.
 };
 
+// DT_FLAGS_1 values.
+enum {
+  DF_1_NOW       = 0x0001,
+  DF_1_GLOBAL    = 0x0002,
+  DF_1_GROUP     = 0x0004,
+  DF_1_NODELETE  = 0x0008,
+  DF_1_LOADFLTR  = 0x0010,
+  DF_1_INITFIRST = 0x0020,
+  DF_1_NOOPEN    = 0x0040,
+  DF_1_ORIGIN    = 0x0080,
+  DF_1_DIRECT    = 0x0100,
+  DF_1_TRANS     = 0x0200,
+  DF_1_INTERPOSE = 0x0400,
+  DF_1_NODEFLIB  = 0x0800,
+  DF_1_NODUMP    = 0x1000,
+  DF_1_CONLFAT   = 0x2000
+};
+
 } // end namespace ELF
 
 } // end namespace llvm
Index: lib/MC/MCAssembler.cpp
===================================================================
--- lib/MC/MCAssembler.cpp	(revision 152063)
+++ lib/MC/MCAssembler.cpp	(working copy)
@@ -157,7 +157,8 @@
 }
 
 MCFragment::MCFragment(FragmentType _Kind, MCSectionData *_Parent)
-  : Kind(_Kind), Parent(_Parent), Atom(0), Offset(~UINT64_C(0))
+  : Kind(_Kind), Parent(_Parent), Atom(0), Offset(~UINT64_C(0)),
+    LayoutOrder(~(0U))
 {
   if (Parent)
     Parent->getFragmentList().push_back(this);
@@ -197,7 +198,7 @@
 MCAssembler::MCAssembler(MCContext &Context_, MCAsmBackend &Backend_,
                          MCCodeEmitter &Emitter_, MCObjectWriter &Writer_,
                          raw_ostream &OS_)
-  : Context(Context_), Backend(Backend_), Emitter(Emitter_), Writer(Writer_),
+  : Context(Context_), Backend(Backend_), Emitter(Emitter_), Writer(&Writer_),
     OS(OS_), RelaxAll(false), NoExecStack(false), SubsectionsViaSymbols(false)
 {
 }
@@ -205,6 +206,11 @@
 MCAssembler::~MCAssembler() {
 }
 
+void MCAssembler::setWriter(MCObjectWriter &ObjectWriter) {
+  delete Writer;
+  Writer = &ObjectWriter;
+}
+
 bool MCAssembler::isSymbolLinkerVisible(const MCSymbol &Symbol) const {
   // Non-temporary labels should always be visible to the linker.
   if (!Symbol.isTemporary())

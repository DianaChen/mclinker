Index: include/llvm/Target/TargetMachine.h
===================================================================
--- include/llvm/Target/TargetMachine.h	(revision 142614)
+++ include/llvm/Target/TargetMachine.h	(working copy)
@@ -277,6 +277,16 @@
                                  bool = true) {
     return true;
   }
+
+  /// addCommonCodeGenPasses - Add standard LLVM codegen passes used for
+  /// both emitting to assembly files or machine code output.
+  ///
+  virtual bool addCommonCodeGenPasses(PassManagerBase &,
+                              CodeGenOpt::Level,
+                              bool DisableVerify,
+                              MCContext *&OutCtx) {
+    return true;
+  }
 };
 
 /// LLVMTargetMachine - This class describes a target machine that is
@@ -288,14 +298,13 @@
                     StringRef CPU, StringRef FS,
                     Reloc::Model RM, CodeModel::Model CM);
 
-private:
+public:
   /// addCommonCodeGenPasses - Add standard LLVM codegen passes used for
   /// both emitting to assembly files or machine code output.
   ///
   bool addCommonCodeGenPasses(PassManagerBase &, CodeGenOpt::Level,
                               bool DisableVerify, MCContext *&OutCtx);
 
-public:
   /// addPassesToEmitFile - Add passes to the specified pass manager to get the
   /// specified file emitted.  Typically this will involve several steps of code
   /// generation.  If OptLevel is None, the code generator should emit code as
Index: include/llvm/MC/MCAssembler.h
===================================================================
--- include/llvm/MC/MCAssembler.h	(revision 142614)
+++ include/llvm/MC/MCAssembler.h	(working copy)
@@ -53,7 +53,8 @@
     FT_Org,
     FT_Dwarf,
     FT_DwarfFrame,
-    FT_LEB
+    FT_LEB,
+    FT_Region
   };
 
 private:
@@ -466,6 +467,7 @@
   // Only for use as sentinel.
   MCSectionData();
   MCSectionData(const MCSection &Section, MCAssembler *A = 0);
+  MCSectionData(const MCSection &Section, iplist<MCSectionData> &Sections);
 
   const MCSection &getSection() const { return *Section; }
 
@@ -554,6 +556,8 @@
   MCSymbolData();
   MCSymbolData(const MCSymbol &_Symbol, MCFragment *_Fragment, uint64_t _Offset,
                MCAssembler *A = 0);
+  MCSymbolData(const MCSymbol &_Symbol, MCFragment *_Fragment, uint64_t _Offset,
+               iplist<MCSymbolData> &Symbols);
 
   /// @name Accessors
   /// @{
@@ -664,7 +668,7 @@
 
   MCCodeEmitter &Emitter;
 
-  MCObjectWriter &Writer;
+  MCObjectWriter *m_pWriter;
 
   raw_ostream &OS;
 
@@ -791,8 +795,13 @@
 
   MCCodeEmitter &getEmitter() const { return Emitter; }
 
-  MCObjectWriter &getWriter() const { return Writer; }
+  MCObjectWriter &getWriter() const { return *m_pWriter; }
 
+  void setWriter(MCObjectWriter &pObjectWriter) {
+    delete m_pWriter;
+    m_pWriter = &pObjectWriter;
+  }
+
   /// Finish - Do final processing and write the object to the output stream.
   /// \arg Writer is used for custom object writer (as the MCJIT does),
   /// if not specified it is automatically created from backend.
Index: include/llvm/MC/MCSectionELF.h
===================================================================
--- include/llvm/MC/MCSectionELF.h	(revision 142614)
+++ include/llvm/MC/MCSectionELF.h	(working copy)
@@ -42,7 +42,7 @@
 
   const MCSymbol *Group;
 
-private:
+public:
   friend class MCContext;
   MCSectionELF(StringRef Section, unsigned type, unsigned flags,
                SectionKind K, unsigned entrySize, const MCSymbol *group)
Index: include/llvm/MC/MCSymbol.h
===================================================================
--- include/llvm/MC/MCSymbol.h	(revision 142614)
+++ include/llvm/MC/MCSymbol.h	(working copy)
@@ -55,7 +55,7 @@
     /// IsUsed - True if this symbol has been used.
     mutable unsigned IsUsed : 1;
 
-  private:  // MCContext creates and uniques these.
+  public:  // MCContext creates and uniques these.
     friend class MCExpr;
     friend class MCContext;
     MCSymbol(StringRef name, bool isTemporary)
Index: include/llvm/Support/CommandLine.h
===================================================================
--- include/llvm/Support/CommandLine.h	(revision 142614)
+++ include/llvm/Support/CommandLine.h	(working copy)
@@ -339,7 +339,11 @@
 
   bool hasValue() const { return false; }
 
-  const DataType &getValue() const { assert(false && "no default value"); }
+  const DataType &getValue() const {
+    assert(false && "no default value");
+    DataType *p = 0;
+    return *p;
+  }
 
   // Some options may take their value from a different data type.
   template<class DT>
Index: lib/MC/MCAssembler.cpp
===================================================================
--- lib/MC/MCAssembler.cpp	(revision 142614)
+++ lib/MC/MCAssembler.cpp	(working copy)
@@ -177,6 +177,15 @@
     A->getSectionList().push_back(this);
 }
 
+MCSectionData::MCSectionData(const MCSection &_Section,
+                             iplist<MCSectionData> &Sections)
+  : Section(&_Section),
+    Ordinal(~UINT32_C(0)),
+    Alignment(1),
+    HasInstructions(false)
+{
+  Sections.push_back(this);
+}
 /* *** */
 
 MCSymbolData::MCSymbolData() : Symbol(0) {}
@@ -192,12 +201,22 @@
     A->getSymbolList().push_back(this);
 }
 
+MCSymbolData::MCSymbolData(const MCSymbol &_Symbol, MCFragment *_Fragment,
+                           uint64_t _Offset, iplist<MCSymbolData> &Symbols)
+  : Symbol(&_Symbol), Fragment(_Fragment), Offset(_Offset),
+    IsExternal(false), IsPrivateExtern(false),
+    CommonSize(0), SymbolSize(0), CommonAlign(0),
+    Flags(0), Index(0)
+{
+  Symbols.push_back(this);
+}
+
 /* *** */
 
 MCAssembler::MCAssembler(MCContext &Context_, MCAsmBackend &Backend_,
                          MCCodeEmitter &Emitter_, MCObjectWriter &Writer_,
                          raw_ostream &OS_)
-  : Context(Context_), Backend(Backend_), Emitter(Emitter_), Writer(Writer_),
+  : Context(Context_), Backend(Backend_), Emitter(Emitter_), m_pWriter(&Writer_),
     OS(OS_), RelaxAll(false), NoExecStack(false), SubsectionsViaSymbols(false)
 {
 }

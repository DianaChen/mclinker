//===- Auto generated by scripts/genscriptparser.sh. Do not touch! --------===//
//
//                     The MCLinker Project
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#line 2 "ScriptScanner.cc"

#line 4 "ScriptScanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 117
#define YY_END_OF_BUFFER 118
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[605] =
    {   0,
        0,    0,  113,  113,    0,    0,  118,  117,  115,  116,
      101,  117,  110,  100,   93,  104,  105,   98,   96,   87,
       97,  110,   99,  108,  108,   90,  103,   94,   88,   95,
       89,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  113,
       92,  106,   91,  107,  102,  101,  109,   98,   96,   87,
       97,  109,   99,  108,  108,   89,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,   92,  102,
      115,  113,   74,    0,  111,    0,  110,  108,   77,   83,
       81,   79,   80,  113,  113,   82,  108,  108,  113,   71,

       75,   73,   76,   72,  110,   67,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,   84,   78,  109,  108,
      114,  108,  108,    0,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  108,  112,  108,   85,   86,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      108,  108,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,   36,   37,  109,  109,
      109,  109,  109,  109,  109,  112,  110,  110,   53,  110,
       64,  110,  110,  110,  110,  110,  110,   58,  110,  110,
      110,  110,   65,  110,  110,  110,   47,  110,   55,  110,
      110,  110,  110,  110,  110,  110,  110,   56,  110,  110,
      110,   48,  110,  110,  110,  110,  109,   26,  109,  109,
      109,  109,   64,  109,  109,  109,  109,   65,  109,  109,
      109,   38,  109,  109,  109,  109,  109,  109,  110,  110,

      110,  110,  110,   63,    1,  110,  110,  110,    4,  110,
      110,  110,    3,  110,  110,  110,  110,  110,  110,  110,
      110,   24,  110,  110,  110,   54,  110,   57,  110,  110,
      110,  109,   27,   29,  109,  109,  109,  109,   63,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,   11,
      110,  110,  110,  110,  110,   12,  110,   19,  110,  110,
       15,  110,   23,  110,   62,  110,    6,  110,  110,  110,
      110,  110,  110,  110,  110,   10,  109,  109,  109,  109,
      109,  109,   19,   34,  109,  109,   62,   39,  109,  109,
      109,   41,  110,  110,  110,   59,  110,  110,    2,  110,

      110,  110,  110,  110,   66,   20,  110,  110,  110,  110,
        8,  110,  109,   28,  109,  109,  109,   33,  109,  109,
       66,   20,  109,  109,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,   22,  110,  110,
       68,   25,  109,   43,  109,   35,  109,  109,  109,  109,
        5,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,   51,  109,  109,  109,
      109,  109,  109,  110,  110,  110,  110,  110,   18,  110,
       69,   70,  110,  110,  110,    7,  110,  110,  110,  109,
      109,  109,  109,  109,  109,  110,  110,  110,  110,  110,

       16,   17,  110,  110,  110,  110,  110,  109,  109,   44,
      109,  109,  109,   61,  110,   46,  110,  110,  110,  110,
      110,  110,   49,  109,  109,  109,  109,  109,  110,  110,
      110,    9,  110,  110,  110,  109,  109,  109,   40,  109,
      110,  110,  110,   21,  110,  110,   45,  109,  109,  109,
       21,   42,  110,  110,  110,  110,  110,  109,  109,  109,
      110,  110,  110,  110,  110,  109,   31,  109,  110,  110,
      110,   50,  110,  109,  109,  110,  110,  110,  110,   30,
      109,  110,  110,  110,  110,  109,  110,  110,  110,  110,
      109,   60,  110,  110,   52,  109,  110,  110,   32,   13,

      110,  110,   14,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    7,    8,    1,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   20,   21,
       22,   23,   24,    1,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   51,   53,   54,    1,   55,   55,   55,   55,

       55,   55,   15,   15,   15,   15,   56,   57,   58,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   59,
       15,   15,   60,   61,   62,   63,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[64] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    1,    1,    1,
        2,    2,    2,    2,    3,    3,    4,    4,    1,    1,
        1,    5,    1,    2,    4,    4,    4,    4,    4,    4,
        3,    3,    3,    3,    4,    3,    4,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        2,    3,    2,    3,    4,    4,    3,    4,    3,    1,
        1,    1,    3
    } ;

static yyconst flex_int16_t yy_base[613] =
    {   0,
        0,    0,    0,    0,   63,    0,  765, 3206,  759, 3206,
      737,  122,  171, 3206,  120, 3206, 3206,  736,  726,  725,
      107,  126,  127,  135,  185, 3206, 3206,  111,  722,  112,
      721,  201,  132,  223,  205,  204,  242,  226,  256,  259,
      274,  260,  297,  307,  311,  312,  328,  378,  334,  719,
      717, 3206,  125, 3206,  359,  712,  349,  708,  707, 3206,
      705,    0,  133,  368,  376, 3206,  132,  690,  686,  134,
      690,  683,  132,  121,  137,  123,  674,  177, 3206,    0,
      710,  687, 3206,  199, 3206,  705,  384,  434, 3206, 3206,
     3206, 3206, 3206,  489,  685, 3206,  418,  684,  526,  683,

     3206, 3206, 3206,  682,  462,  417,  484,  507,  506,  525,
      510,  553,  558,  563,  579,  580,  585,  635,  601,  604,
      618,  623,  264,  634,  652,  451,  659,  671,  688,  692,
      706,  710,  724,  730,  745,  736, 3206, 3206,    0,  772,
     3206,  775, 3206,  788,  657,  669,  661,  654,  195,  646,
      655,  654,  653,  650,  635,  647,  621,  630,  615,  619,
      620,  623,  612,  619,  599,  792,  770,  155, 3206, 3206,
      807,  814,  826,  832,  833,  853,  847,  854,  868,  877,
      889,  895,  896,  910,  916,  922,  934,  948,  952,  969,
      973,  987,  991, 1005, 1009, 1023, 1027, 1041, 1045, 1059,

     1063, 1080, 1084, 1098, 1104, 1105, 1125, 1124, 1144, 1148,
        0,  334,  606,  602,  612,  614,  603,  594,  586,  601,
      591,  596,  592,  579,  579,  579,  561,    0,  556,  556,
      563,  546,  540,  543,  550,  888, 1162, 1166, 1180, 1181,
     1187, 1199, 1208, 1214, 1220, 1232, 1238, 1244, 1256, 1262,
     1268, 1274, 1280, 1295, 1286, 1301, 1307, 1319, 1325, 1331,
     1337, 1354, 1355, 1361, 1375, 1387, 1393, 1402, 1408, 1414,
     1423, 1429, 1446, 1450, 1465, 1477,  539,    0,  535,  537,
      531,  521,    0,  507,  520,  506,  517,    0,  497,  508,
      507,    0,  502,  493,  489,  491,  493,  473, 1483, 1489,

     1498, 1504, 1516, 1522, 1523, 1540, 1544, 1558, 1559, 1565,
     1579, 1583, 1597, 1598, 1618, 1604, 1619, 1636, 1640, 1654,
     1660, 1661, 1678, 1682, 1696, 1697, 1715, 1716, 1722, 1736,
     1743,  464,  465,    0,  461,  473,  453,  456,    0,  446,
      450,  451,  446,  444,  430,  442,  437,  419,  426, 1750,
     1764, 1768, 1782, 1788, 1794, 1800, 1812, 1818, 1824, 1830,
     1836, 1845, 1851, 1860, 1866, 1872, 1878, 1884, 1896, 1908,
     1914, 1915, 1929, 1933, 1947, 1953,  410,  420,  409,  410,
      417,  416,    0,    0,  415,  413,    0,    0,  390,  404,
      385,  371, 1959, 1965, 1971, 1977, 1986, 1992, 1998, 2007,

     2019, 2025, 2026, 2045, 2044, 2051, 2068, 2072, 2086, 2087,
     2101, 2105,  391,    0,  393,  371,  383,    0,  367,  363,
        0,  347,  346,  367, 2119, 2123, 2138, 2142, 2156, 2157,
     2171, 2175, 2189, 2193, 2207, 2211, 2225, 2229, 2246, 2253,
     2260,    0,  367,    0,  359,    0,  351,  348,  325,  333,
     2267, 2274, 2288, 2294, 2303, 2309, 2315, 2324, 2330, 2336,
     2348, 2354, 2366, 2375, 2387, 2396, 2402,  332,  326,  303,
      318,  304,  318, 2408, 2414, 2426, 2433, 2447, 2448, 2462,
     2466, 2480, 2481, 2495, 2501, 2507, 2513, 2522, 2531,  299,
      302,  308,  306,  308,  302, 2537, 2543, 2549, 2555, 2564,

     2570, 2576, 2590, 2596, 2610, 2616, 2622,  296,  284,    0,
      289,  272,  276, 2631, 2637, 2643, 2652, 2658, 2664, 2673,
     2682, 2691, 2697,  243,  238,  261,  242,  240, 2703, 2722,
     2721, 2728, 2740, 2747, 2759,  248,  277,  236,    0,  218,
     2765, 2771, 2783, 2789, 2795, 2801,    0,  223,  218,  220,
        0,    0, 2815, 2827, 2841, 2842, 2856,  207,  203,  187,
     2860, 2874, 2875, 2889, 2895,  190,    0,  177, 2910, 2914,
     2928, 2929, 2935,  149,  139, 2949, 2955, 2964, 2978,    0,
      119, 2987, 2999, 3005, 3006,  138, 3024, 3025, 3044, 3043,
      124, 3050, 3064, 3068, 3083,  120, 3087, 3101,    0, 3105,

     3119, 3123, 3137, 3206, 3180, 3184, 3189, 3193, 3195, 3198,
     3201,  137
    } ;

static yyconst flex_int16_t yy_def[613] =
    {   0,
      605,  605,  604,    3,  604,    5,  604,  604,  604,  604,
      606,  607,  608,  604,  604,  604,  604,  606,  606,  606,
      606,  608,  608,  606,  606,  604,  604,  604,  604,  604,
      606,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  606,
      606,  604,  604,  604,  608,  604,  609,  604,  604,  604,
      604,  609,  609,  604,  604,  604,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  604,  609,
      604,  606,  604,  607,  604,  607,  608,  608,  604,  604,
      604,  604,  604,  610,  606,  604,  606,  606,  606,  604,

      604,  604,  604,  604,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  604,  604,  609,  609,
      604,  604,  604,  604,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  118,  611,   99,  604,  604,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,

      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      609,  612,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  611,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  118,  118,

      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  118,  118,  118,  118,  118,  118,  118,  118,

      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  609,  609,  609,
      609,  609,  609,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  609,
      609,  609,  609,  609,  609,  118,  118,  118,  118,  118,

      118,  118,  118,  118,  118,  118,  118,  609,  609,  609,
      609,  609,  609,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  609,  609,  609,  609,  609,  118,  118,
      118,  118,  118,  118,  118,  609,  609,  609,  609,  609,
      118,  118,  118,  118,  118,  118,  609,  609,  609,  609,
      609,  609,  118,  118,  118,  118,  118,  609,  609,  609,
      118,  118,  118,  118,  118,  609,  609,  609,  118,  118,
      118,  118,  118,  609,  609,  118,  118,  118,  118,  609,
      609,  118,  118,  118,  118,  609,  118,  118,  118,  118,
      609,  118,  118,  118,  118,  609,  118,  118,  609,  118,

      118,  118,  118,    0,  604,  604,  604,  604,  604,  604,
      604,  604
    } ;

static yyconst flex_int16_t yy_nxt[3270] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   22,   41,   42,   43,   44,   45,   46,
       47,   22,   48,   49,   22,   22,   22,   22,   22,   22,
       50,   22,   51,   22,   22,   22,   22,   22,   22,   52,
       53,   54,   55,    8,    9,   10,   56,   12,   57,   14,
       15,   16,   17,   58,   59,   60,   61,   62,   63,   64,
       65,   26,   27,   28,   29,   30,   66,   67,   68,   69,
       70,   62,   62,   62,   71,   72,   62,   62,   73,   74,

       75,   76,   77,   62,   62,   78,   62,   62,   62,   62,
       62,   62,   62,    8,   62,   79,   62,   62,   62,   62,
       62,   62,   52,   53,   54,   80,   85,   89,   93,   82,
       82,  100,  101,  103,  104,   82,   82,   95,   82,   82,
      212,   90,   82,  141,   82,  157,  137,  599,   96,   82,
       82,   97,   97,  158,   96,   82,  604,  145,  150,  146,
      155,  596,  151,   94,  161,  159,  591,  147,  162,   98,
      156,   98,  586,   86,   82,  160,  152,  581,   82,   82,
      107,   82,   99,   82,   82,  138,  580,   88,   88,   98,
       98,   98,   98,   99,   82,   88,   88,   88,   88,   88,

       88,   97,   97,   85,   82,  164,  604,   82,   82,  165,
       98,   82,   98,   82,   82,   82,   82,   82,  575,   98,
      574,   98,  568,   82,   82,   88,   82,   82,   82,   82,
      567,  217,  218,   82,  219,   82,   82,  110,   82,  566,
       98,  112,   98,  105,  106,   82,   82,  111,  560,   82,
       86,  113,   82,   82,   82,  559,   82,   82,  558,   82,
      552,  108,   82,   82,  109,   82,   82,  116,   82,   82,
       82,   82,   82,  551,  114,   82,  547,   82,   82,   82,
      115,  540,   82,   82,   82,  539,   82,  120,  117,  538,
      195,  537,  536,   87,   82,   87,  118,   82,  121,  196,

       82,  548,  119,   87,  528,  549,   87,   82,   82,   82,
       82,   82,   82,  527,   82,   82,  526,   82,  550,   82,
       82,   82,   82,   82,   82,  122,   82,  525,  524,  513,
       82,   82,  512,  511,   82,   82,  510,   82,   82,  509,
       82,  508,  495,  127,   82,  123,   82,  494,  124,   82,
      493,   82,  492,  128,  491,  125,  126,   82,  136,   82,
      490,  473,   82,   82,   82,  140,  140,  472,  143,   82,
      143,   82,  129,  140,  140,  140,  140,  140,  140,  471,
       82,   82,   82,  470,  142,  142,   82,   82,   82,  143,
       82,  143,  142,  142,   82,  469,   82,  468,  450,  449,

      448,   82,  143,  140,  143,  447,  130,   82,  446,  131,
      143,   82,  143,  445,  444,  144,  132,  443,  133,  442,
       82,  134,  135,  143,  424,  143,  144,   82,  423,   82,
       82,  143,  422,  143,   97,   97,   82,   82,  421,  604,
       82,  420,  419,  418,   82,  417,   82,  416,  415,  414,
       88,   88,   98,  413,   98,  392,  391,   82,   88,   88,
       88,   88,   88,   88,  390,   82,  389,  388,  166,   82,
      166,  387,   82,   98,   82,   98,  386,   87,  385,  199,
       87,  384,   87,  383,  382,   82,   82,   82,   88,  166,
       87,  166,   82,   87,   82,  381,   82,  380,  379,   82,

       82,   82,   82,  378,  171,   82,   82,   82,  377,   82,
       82,  349,   82,   82,   82,  172,   82,   82,   82,   82,
       82,  348,   82,  347,  346,  345,  344,  173,   82,   82,
       82,  343,  342,   82,  176,   82,   82,   82,  178,   82,
      341,   82,  168,  168,  174,  340,  175,  604,   82,  339,
      168,  168,  168,  168,  168,  168,   82,  338,   82,   82,
      337,   82,   82,   82,  336,   82,   82,  177,   82,  335,
       82,  334,  333,   82,  332,   82,   82,   82,  298,  297,
      168,   82,   82,   82,  180,  296,   82,  295,   82,   82,
       82,   82,   82,  294,  293,   82,  179,   82,  182,  292,

      291,  181,   82,   82,   82,   82,  290,   82,   82,  289,
       82,   82,  185,   82,   82,   82,   82,  288,  184,  287,
      183,   82,  286,  285,   82,  284,   82,   82,   82,  191,
       82,   82,   82,   82,  283,   82,  282,   82,   82,  281,
      280,   82,  279,  278,  277,   82,   82,   82,  235,  234,
      233,  232,  231,   82,  230,  193,   82,  192,   82,  194,
       87,  186,  229,   87,  187,   87,  188,  228,  227,  197,
       82,  226,  225,   87,  189,   82,   87,  190,   87,  224,
      223,   87,  222,   87,  221,   87,  200,   82,   87,  220,
       87,   87,  216,  215,   87,  198,  214,   87,   87,  213,

       87,   87,   87,  170,  169,  604,  604,  604,  604,  201,
       87,   81,  202,   87,   87,  163,  203,   87,  204,   87,
      154,   87,  153,   87,  149,  148,   93,   87,   92,   91,
       87,   87,   87,   83,   87,   87,   87,   87,  604,   87,
      604,   87,  604,  102,  205,   87,  604,   92,   87,   87,
       87,  206,   87,   87,  208,   87,   87,   91,   83,   87,
       81,   87,   87,   87,  604,   87,   87,   87,  207,   87,
      209,   87,   87,   82,   87,   87,   87,  210,   87,  604,
       82,  604,   82,  604,   87,  604,  604,   87,  140,  140,
      604,  142,  142,   82,  604,  604,  140,  140,  140,  140,

      140,  140,  604,  604,  212,  212,  211,  604,  211,  143,
      604,  143,  212,  212,  212,  212,  212,  212,   87,  604,
      604,   87,   82,   87,  604,  604,  140,  211,  604,  211,
      143,   87,  143,   87,   87,  237,   87,  604,   87,  604,
       87,  604,  212,   87,  604,   87,   87,  604,  604,   87,
      604,  238,   87,   87,  239,   87,   87,   87,   87,   87,
      604,   87,   87,   87,   87,   87,  604,  604,   87,  604,
      604,   87,   87,  243,  240,   87,   87,  242,   87,   87,
      244,  241,   87,   87,   87,   87,   87,  604,  604,   87,
      604,   82,   87,   87,   87,   87,   87,   87,   82,   87,

       82,  604,  604,   87,  604,  604,   87,   87,   87,  245,
       87,   82,  246,  604,  604,   87,   87,  247,   87,   87,
       87,   87,  249,  604,   87,   87,   87,   87,   87,  604,
      248,   87,  604,  604,   87,   87,   87,   87,   87,   87,
       82,   87,   87,  251,  604,   87,  604,   87,   87,   87,
      604,   87,   87,   87,  250,   87,  604,  252,   87,  604,
       87,   87,  604,   87,   87,   87,  604,  604,  604,  604,
      604,  604,  253,   87,   87,  604,   87,   87,   87,   87,
      254,   87,  604,   87,  604,  604,  604,   87,  604,  604,
       87,   87,  604,  604,   87,   87,  255,  256,   87,   87,

       87,  604,   87,  604,   87,  604,  604,  604,   87,  604,
      604,   87,  257,   87,  604,   87,  258,   87,   87,  604,
       87,  259,   87,  604,  604,  604,   87,  604,  604,   87,
       87,   87,  604,   87,   87,   87,   87,  604,   87,  604,
       87,  604,  604,  260,   87,  604,  604,   87,   87,   87,
      261,   87,   87,   87,   87,  604,   87,  604,   87,  604,
      604,  262,   87,  604,  604,   87,   87,   87,  604,   87,
       87,   87,   87,  604,   87,  263,   87,  604,  604,  604,
      264,  604,  604,   87,   87,   87,  265,   87,   87,   87,
       87,  604,   87,  604,   87,  604,  604,  604,   87,  604,

      266,   87,   87,  604,  604,   87,   87,  268,  267,   87,
       87,   87,  604,   87,  604,   87,  604,  604,  604,   87,
      604,  604,   87,   87,   87,  269,   87,   87,  604,   87,
       87,   87,  604,   87,   87,   87,   87,   87,  604,  604,
       87,  270,  604,   87,   87,  271,   87,   87,  272,  273,
       87,   87,  604,   87,   87,   87,   87,  604,  604,  604,
      604,  604,  604,   87,   87,  274,   87,   87,  275,  604,
       87,  604,  604,   87,   87,   87,  604,   87,  276,   87,
      604,  604,  604,   87,  604,  604,   87,   87,   87,  604,
       87,   87,   87,   87,  300,   87,  604,   87,  604,  604,

      604,   87,  604,  299,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,  604,  604,   87,  604,   87,   87,
       87,  604,   87,   87,  301,   87,   87,  604,   87,   87,
       87,  604,  303,  604,   87,  604,  604,   87,   87,   87,
       87,   87,  302,   87,  604,   87,   87,   87,  604,   87,
       87,   87,  604,   87,  604,  604,   87,  304,   87,   87,
      604,   87,   87,   87,   87,  604,  604,   87,  305,   87,
       87,   87,  604,   87,   87,   87,  306,   87,  604,  307,
       87,  604,   87,   87,  308,   87,   87,   87,   87,  604,
      604,   87,  604,   87,   87,   87,  310,   87,   87,   87,

       87,  309,  604,   87,   87,   87,   87,   87,  604,   87,
       87,   87,   87,   87,  604,   87,   87,   87,  311,   87,
      312,   87,   87,  604,   87,   87,   87,   87,   87,  313,
       87,  604,   87,   87,   87,  604,   87,   87,   87,  604,
       87,  604,  314,   87,  604,   87,   87,  315,   87,   87,
       87,   87,  604,  604,   87,  604,   87,   87,   87,  604,
       87,   87,   87,   87,   87,  604,   87,   87,   87,  604,
       87,  604,  316,   87,  604,  317,   87,  604,  318,   87,
       87,   87,  604,   87,   87,   87,   87,   87,  604,  604,
       87,  604,   87,   87,   87,  604,   87,   87,  604,  604,

       87,   87,  604,   87,   87,  320,   87,  604,  319,  604,
      321,  604,  604,   87,   87,  604,   87,   87,   87,   87,
      604,  604,   87,  604,   87,  323,   87,  604,   87,  322,
      604,   87,   87,   87,  324,   87,  604,   87,  604,   87,
       87,   87,  604,   87,   87,   87,  325,   87,  604,   87,
       87,  604,   87,   87,   87,   87,   87,  604,   87,  604,
       87,  604,   87,  604,  604,   87,  326,  604,   87,  604,
      604,   87,   87,  328,  604,   87,   87,   87,  604,   87,
      604,   87,  327,  604,  604,   87,  604,  604,   87,   87,
      604,   87,   87,  329,   87,  604,   87,  604,  604,  604,

      330,  604,  604,   87,   87,  331,   87,   87,   87,   87,
      604,  604,   87,  604,   87,   87,   87,  351,   87,   87,
       87,  604,   87,  604,   87,   87,  350,   87,   87,   87,
       87,   87,  353,   87,  604,   87,  604,   87,  604,  352,
       87,  604,   87,   87,  604,   87,   87,   87,   87,   87,
      604,   87,   87,   87,   87,   87,  604,  354,   87,  604,
      604,   87,   87,  604,   87,   87,   87,  355,  604,   87,
       87,   87,  604,   87,  604,   87,  604,  604,  604,   87,
      604,  356,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,  604,  604,   87,  604,   87,   87,   87,  604,

       87,   87,  358,  604,   87,   87,  359,   87,   87,   87,
       87,  357,   87,  604,   87,  360,  604,  604,   87,  604,
      604,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,  604,  604,   87,  604,   87,   87,   87,  604,   87,
       87,  361,  362,   87,   87,   87,   87,   87,   87,   87,
       87,  604,  363,  604,  604,  604,  604,   87,   87,  604,
       87,  364,   87,  365,  604,   87,   87,   87,  604,   87,
      604,   87,  366,  604,  604,   87,  604,  604,   87,   87,
       87,  604,   87,   87,  368,   87,   87,   87,  604,   87,
       87,   87,   87,   87,  604,  604,   87,  367,  604,   87,

       87,  604,   87,   87,   87,  369,  604,   87,   87,   87,
      604,   87,  604,  370,  604,  604,  604,   87,  604,  604,
       87,   87,   87,   87,   87,   87,   87,   87,   87,  604,
      604,  604,  604,  604,  371,   87,   87,  604,   87,   87,
      372,   87,   87,  604,   87,   87,   87,   87,   87,  604,
      604,   87,  373,   87,   87,   87,  604,   87,   87,  604,
      604,   87,   87,  604,   87,   87,  374,   87,  375,   87,
      604,  604,   87,  604,   87,   87,   87,  604,   87,   87,
      604,   87,   87,  604,  604,   87,  376,  604,  604,   87,
       87,  393,   87,   87,   87,   87,  604,   87,  604,   87,

      604,  604,  604,   87,  604,  604,   87,   87,   87,  604,
       87,   87,  394,   87,   87,  396,  604,   87,  604,   87,
       87,   87,  397,   87,   87,   87,   87,   87,  604,   87,
       87,   87,  604,   87,  604,  395,   87,  604,  398,   87,
      604,   87,   87,   87,   87,  604,  604,   87,  604,   87,
       87,   87,  399,   87,   87,   87,   87,   87,  604,   87,
       87,   87,   87,   87,  604,   87,   87,   87,  604,   87,
      604,   87,   87,  400,   87,   87,   87,   87,   87,  604,
       87,  604,   87,  604,   87,  604,   87,   87,  401,   87,
       87,   87,   87,   87,  604,   87,  604,   87,   87,   87,

      604,  403,  402,   87,   87,   87,  604,   87,   87,   87,
       87,   87,  604,   87,   87,   87,  604,   87,  604,  604,
       87,  604,   87,   87,  406,   87,   87,   87,  604,  604,
      604,  404,  405,  604,   87,   87,  604,   87,   87,   87,
       87,   87,  604,   87,   87,   87,   87,   87,  604,  604,
       87,  408,  604,   87,   87,   87,   87,   87,   87,   87,
       87,  407,   87,  409,   87,  604,  604,  410,   87,  604,
      604,   87,  411,   87,  604,   87,   87,  412,   87,   87,
      604,  604,   87,  604,   87,   87,   87,  425,   87,   87,
       87,  426,   87,  604,   87,   87,   87,   87,   87,  604,

       87,   87,   87,   87,   87,  604,   87,   87,   87,  427,
       87,  604,   87,   87,  604,   87,   87,   87,   87,   87,
      604,   87,  604,   87,   87,   87,  604,   87,   87,   87,
      429,   87,  604,   87,   87,  604,   87,   87,   87,  428,
       87,  604,  604,  604,  604,   87,   87,  604,   87,   87,
       87,   87,   87,  604,   87,   87,   87,   87,   87,  604,
      430,   87,  604,  431,   87,   87,  432,   87,   87,  434,
       87,   87,  604,   87,  435,   87,   87,   87,  604,  433,
       87,  604,   87,   87,   87,  604,   87,   87,  604,  604,
       87,  604,  604,   87,   87,  437,  604,   87,   87,   87,

      604,   87,  604,   87,  436,  604,  604,   87,  604,  604,
       87,   87,   87,   87,  438,   87,   87,   87,   87,  604,
      604,  604,  604,  604,  440,   87,   87,   87,   87,   87,
       87,   87,   87,  604,   87,  604,   87,  604,  604,  439,
       87,  604,  441,   87,   87,   87,  451,   87,   87,   87,
       87,  604,   87,  604,   87,  604,  604,  604,   87,  604,
      604,   87,   87,  453,   87,   87,  452,   87,   87,   87,
      604,  454,  604,   87,  604,  604,  604,   87,  604,  604,
       87,   87,   87,  456,   87,   87,   87,   87,   87,  604,
      604,  604,  455,  604,  604,   87,   87,   87,   87,   87,

       87,   87,   87,  458,   87,  604,   87,  604,  604,  604,
       87,  604,  457,   87,   87,   87,  604,   87,   87,   87,
       87,  604,   87,  604,   87,  604,  604,  604,   87,  604,
      459,   87,   87,   87,  460,   87,   87,   87,   87,  604,
       87,  604,  462,  604,  604,  461,   87,  604,  604,   87,
       87,   87,  604,   87,   87,   87,   87,  463,   87,  604,
       87,  604,  604,  604,   87,  604,  604,   87,   87,  604,
      464,   87,   87,  604,  604,   87,  604,   87,  465,   87,
      604,  467,   87,  466,   87,   87,   87,  604,   87,   87,
      604,   87,   87,   87,  604,   87,   87,  604,   87,   87,

       87,  604,   87,   87,  604,   87,   87,  604,  604,   87,
      604,  604,  474,   87,   87,  604,   87,   87,  604,   87,
       87,  475,  604,   87,  604,   87,  476,   87,  604,   87,
       87,  604,   87,   87,   87,   87,   87,  604,   87,  477,
       87,   87,   87,  479,   87,   87,   87,  478,   87,  604,
       87,   87,  604,  480,   87,   87,   87,   87,  604,   87,
      604,   87,  483,   87,  604,   87,   87,   87,  481,   87,
      604,  604,   87,  604,   87,   87,  482,   87,   87,   87,
       87,  604,  604,   87,  604,   87,  485,   87,  604,  484,
       87,  604,   87,   87,  604,   87,   87,   87,  604,  604,

      604,   87,  604,  604,   87,   87,   87,  486,   87,  604,
      487,  604,  604,   87,   87,  604,   87,   87,   87,  604,
      489,  604,   87,  604,  488,   87,   87,   87,   87,   87,
      604,   87,  604,   87,   87,   87,  604,   87,   87,   87,
       87,   87,  497,   87,   87,   87,  604,   87,  604,  496,
       87,  604,   87,   87,  604,   87,   87,   87,  604,   87,
      604,  498,   87,  604,   87,   87,  604,  604,   87,  604,
      604,  499,   87,   87,   87,   87,   87,   87,   87,   87,
      604,  604,  604,  500,  604,  604,   87,   87,   87,   87,
       87,   87,   87,   87,  604,   87,  604,   87,  604,  604,

      604,   87,  604,  604,  501,   87,   87,   87,   87,   87,
       87,   87,  502,  604,  604,  604,  604,  604,  604,   87,
       87,   87,   87,   87,   87,  604,   87,   87,  504,  604,
       87,  503,   87,   87,   87,  604,   87,   87,   87,   87,
       87,  604,   87,   87,   87,  505,   87,  604,   87,   87,
      604,   87,   87,   87,  506,   87,  604,   87,  604,  604,
       87,   87,   87,   87,   87,  604,   87,  507,   87,  515,
       87,  604,   87,   87,   87,   87,   87,  516,   87,  514,
       87,   87,   87,  604,   87,   87,   87,  604,   87,  604,
       87,   87,  517,   87,   87,   87,   87,   87,  604,   87,

      518,   87,   87,   87,  604,   87,   87,   87,  604,   87,
      604,  604,   87,  604,  519,   87,   87,  604,   87,   87,
      604,   87,   87,  520,  604,   87,  604,   87,  604,   87,
      604,  604,   87,  604,  604,   87,   87,  604,   87,   87,
      521,   87,   87,  604,  604,   87,  604,   87,   87,   87,
      523,   87,   87,   87,  604,   87,  604,   87,   87,  522,
       87,   87,   87,   87,   87,  604,   87,  604,   87,   87,
       87,  604,   87,   87,   87,  604,   87,  604,   87,   87,
      529,   87,   87,   87,   87,   87,  604,   87,  604,   87,
       87,   87,  604,   87,   87,   87,  531,   87,  604,   87,

       87,  533,   87,   87,   87,  530,   87,  532,   87,  604,
      604,   87,   87,   87,  604,   87,  604,   87,  604,  534,
       87,   87,   87,   87,   87,  604,   87,  604,   87,   87,
       87,  604,   87,   87,   87,  604,   87,  604,  604,   87,
      604,  604,   87,  604,  535,   87,  542,   87,   87,  604,
       87,   87,   87,   87,   87,  604,  541,   87,  543,   87,
       87,   87,  604,   87,   87,  604,   87,   87,  604,   87,
       87,   87,  604,   87,  604,  604,   87,  544,   87,   87,
      604,  604,   87,  545,  604,   87,   87,  604,   87,   87,
       87,   87,  604,  604,   87,  604,   87,   87,  546,  604,

       87,   87,   87,  604,   87,  604,  554,  553,  604,   87,
       87,  604,   87,   87,   87,   87,  604,  604,   87,  604,
       87,   87,   87,  556,   87,   87,   87,   87,   87,  604,
       87,   87,   87,  604,   87,  604,  555,   87,  604,  604,
       87,   87,  557,   87,   87,  604,   87,  604,  604,  604,
      604,  604,  604,   87,   87,  604,   87,   87,   87,  604,
      604,  604,  562,  561,  604,  563,   87,   87,   87,   87,
       87,   87,   87,   87,  604,  604,  604,  604,  604,  564,
       87,   87,   87,   87,   87,   87,   87,   87,  565,   87,
      604,   87,  604,  604,  604,   87,  569,  604,   87,   87,

       87,   87,   87,   87,   87,   87,   87,  604,  604,  604,
      571,  604,  570,   87,   87,   87,   87,   87,   87,  604,
       87,   87,  604,  604,   87,  604,   87,  604,   87,  604,
      604,   87,  572,  573,   87,  576,   87,   87,  604,   87,
      577,   87,  604,   87,  604,   87,  604,  604,  604,   87,
      604,  604,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,  604,  578,   87,  604,   87,   87,   87,  604,
       87,   87,  604,  604,   87,   87,  579,   87,   87,  583,
       87,   87,  604,  604,   87,  604,   87,  582,   87,  604,
       87,   87,  604,   87,   87,   87,  604,   87,  604,  604,

      604,  604,  584,   87,   87,  604,   87,   87,  604,   87,
      585,  604,  604,   87,  604,  604,   87,   87,   87,  604,
       87,  604,  587,  604,  604,   87,   87,  604,   87,   87,
       87,  589,   87,  604,   87,   87,   87,   87,   87,  604,
      604,   87,  588,  604,   87,   87,  604,   87,   87,  590,
       87,   87,  604,   87,   87,   87,   87,  593,  604,  604,
      604,  604,  604,   87,   87,  604,  592,   87,  594,   87,
       87,  604,   87,   87,   87,   87,   87,  604,  604,   87,
      604,   87,   87,   87,  604,   87,   87,  604,  604,   87,
       87,  595,   87,   87,   87,   87,  604,   87,  604,   87,

      604,  604,  597,   87,  604,  604,   87,   87,  604,   87,
       87,  598,   87,   87,   87,  604,   87,  604,   87,  604,
      604,  604,   87,  604,  600,   87,   87,   87,  604,   87,
       87,   87,   87,  601,   87,  604,   87,  604,  604,  604,
       87,  604,  604,   87,   87,   87,  604,   87,   87,   87,
       87,  604,   87,  604,   87,  604,  604,  602,   87,  604,
      603,   87,   87,   87,  604,   87,   87,  604,   87,  604,
      604,  604,  604,  604,  604,  604,   87,  604,  604,   87,
        8,    8,    8,    8,    8,   82,   82,   82,   82,   84,
       84,   84,   84,   84,   87,   87,   87,  139,  139,  167,

      167,  167,  236,  236,  236,    7,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604
    } ;

static yyconst flex_int16_t yy_chk[3270] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,   12,   15,   21,   22,
       23,   28,   28,   30,   30,   33,   22,   23,   22,   23,
      612,   15,   33,   63,   33,   74,   53,  596,   23,   22,
       23,   24,   24,   74,   63,   33,   24,   67,   70,   67,
       73,  591,   70,   21,   76,   75,  586,   67,   76,   24,
       73,   24,  581,   12,   13,   75,   70,  575,   22,   23,
       33,   13,   24,   13,   33,   53,  574,   13,   13,  168,
       24,  168,   24,   24,   13,   13,   13,   13,   13,   13,

       13,   25,   25,   84,   32,   78,   25,   36,   35,   78,
      168,   32,  168,   32,   36,   35,   36,   35,  568,   25,
      566,   25,  560,   13,   32,   13,   34,   36,   35,   38,
      559,  149,  149,   34,  149,   34,   38,   35,   38,  558,
       25,   36,   25,   32,   32,   37,   34,   35,  550,   38,
       84,   36,   37,   32,   37,  549,   36,   35,  548,   39,
      540,   34,   40,   42,   34,   37,   39,   38,   39,   40,
       42,   40,   42,  538,   37,   34,  536,   41,   38,   39,
       37,  528,   40,   42,   41,  527,   41,   42,   39,  526,
      123,  525,  524,  123,   37,  123,   40,   41,   42,  123,

       43,  537,   41,  123,  513,  537,  123,   43,   39,   43,
       44,   40,   42,  512,   45,   46,  511,   44,  537,   44,
       43,   45,   46,   45,   46,   43,   41,  509,  508,  495,
       44,   47,  494,  493,   45,   46,  492,   49,   47,  491,
       47,  490,  473,   46,   49,   44,   49,  472,   45,   43,
      471,   47,  470,   46,  469,   45,   45,   49,   49,   44,
      468,  450,   55,   45,   46,   57,   57,  449,  212,   55,
      212,   55,   47,   57,   57,   57,   57,   57,   57,  448,
       47,   48,   55,  447,   64,   64,   49,   87,   48,  212,
       48,  212,   65,   65,   87,  445,   87,  443,  424,  423,

      422,   48,   64,   57,   64,  420,   48,   87,  419,   48,
       65,   55,   65,  417,  416,   64,   48,  415,   48,  413,
      106,   48,   48,   64,  392,   64,   64,  106,  391,  106,
       48,   65,  390,   65,   97,   97,   87,   88,  389,   97,
      106,  386,  385,  382,   88,  381,   88,  380,  379,  378,
       88,   88,   97,  377,   97,  349,  348,   88,   88,   88,
       88,   88,   88,   88,  347,  105,  346,  345,   88,  106,
       88,  344,  105,   97,  105,   97,  343,  126,  342,  126,
      126,  341,  126,  340,  338,  105,   88,  107,   88,   88,
      126,   88,   94,  126,  107,  337,  107,  336,  335,   94,

       94,   94,   94,  333,  105,   94,   94,  107,  332,  109,
      108,  298,   94,  111,  105,  105,  109,  108,  109,  108,
      111,  297,  111,  296,  295,  294,  293,  107,  110,  109,
      108,  291,  290,  111,  109,  110,  107,  110,  111,   94,
      289,   94,   99,   99,  108,  287,  108,   99,  110,  286,
       99,   99,   99,   99,   99,   99,  112,  285,  109,  108,
      284,  113,  111,  112,  282,  112,  114,  110,  113,  281,
      113,  280,  279,  114,  277,  114,  112,  110,  235,  234,
       99,  113,  115,  116,  113,  233,  114,  232,  117,  115,
      116,  115,  116,  231,  230,  117,  112,  117,  114,  229,

      227,  113,  115,  116,  119,  112,  226,  120,  117,  225,
      113,  119,  117,  119,  120,  114,  120,  224,  116,  223,
      115,  121,  222,  221,  119,  220,  122,  120,  121,  119,
      121,  115,  116,  122,  219,  122,  218,  117,  118,  217,
      216,  121,  215,  214,  213,  118,  122,  118,  165,  164,
      163,  162,  161,  119,  160,  121,  120,  120,  118,  122,
      124,  118,  159,  124,  118,  124,  118,  158,  157,  124,
      121,  156,  155,  124,  118,  122,  124,  118,  125,  154,
      153,  125,  152,  125,  151,  127,  127,  118,  127,  150,
      127,  125,  148,  147,  125,  125,  146,  128,  127,  145,

      128,  127,  128,  104,  100,   98,   95,   86,   82,  128,
      128,   81,  129,  128,  129,   77,  130,  129,  130,  129,
       72,  130,   71,  130,   69,   68,   61,  129,   59,   58,
      129,  130,  131,   56,  130,  131,  132,  131,   51,  132,
       50,  132,   31,   29,  131,  131,   20,   19,  131,  132,
      133,  132,  132,  133,  134,  133,  134,   18,   11,  134,
        9,  134,  136,  133,    7,  136,  133,  136,  133,  134,
      135,  135,  134,  167,  135,  136,  135,  136,  136,    0,
      167,    0,  167,    0,  135,    0,    0,  135,  140,  140,
        0,  142,  142,  167,    0,    0,  140,  140,  140,  140,

      140,  140,    0,    0,  144,  144,  140,    0,  140,  142,
        0,  142,  144,  144,  144,  144,  144,  144,  166,    0,
        0,  166,  167,  166,    0,    0,  140,  140,    0,  140,
      142,  166,  142,  171,  166,  171,  171,    0,  171,    0,
      172,    0,  144,  172,    0,  172,  171,    0,    0,  171,
        0,  172,  173,  172,  173,  173,  172,  173,  174,  175,
        0,  174,  175,  174,  175,  173,    0,    0,  173,    0,
        0,  174,  175,  177,  174,  175,  177,  176,  177,  176,
      178,  175,  176,  178,  176,  178,  177,    0,    0,  177,
        0,  236,  176,  178,  179,  176,  178,  179,  236,  179,

      236,    0,    0,  180,    0,    0,  180,  179,  180,  179,
      179,  236,  180,    0,    0,  181,  180,  181,  181,  180,
      181,  182,  183,    0,  182,  183,  182,  183,  181,    0,
      182,  181,    0,    0,  182,  183,  184,  182,  183,  184,
      236,  184,  185,  185,    0,  185,    0,  185,  186,  184,
        0,  186,  184,  186,  184,  185,    0,  186,  185,    0,
      187,  186,    0,  187,  186,  187,    0,    0,    0,    0,
        0,    0,  187,  187,  188,    0,  187,  188,  189,  188,
      188,  189,    0,  189,    0,    0,    0,  188,    0,    0,
      188,  189,    0,    0,  189,  190,  189,  190,  190,  191,

      190,    0,  191,    0,  191,    0,    0,    0,  190,    0,
        0,  190,  191,  192,    0,  191,  192,  193,  192,    0,
      193,  193,  193,    0,    0,    0,  192,    0,    0,  192,
      193,  194,    0,  193,  194,  195,  194,    0,  195,    0,
      195,    0,    0,  194,  194,    0,    0,  194,  195,  196,
      195,  195,  196,  197,  196,    0,  197,    0,  197,    0,
        0,  196,  196,    0,    0,  196,  197,  198,    0,  197,
      198,  199,  198,    0,  199,  197,  199,    0,    0,    0,
      198,    0,    0,  198,  199,  200,  199,  199,  200,  201,
      200,    0,  201,    0,  201,    0,    0,    0,  200,    0,

      200,  200,  201,    0,    0,  201,  202,  202,  201,  202,
      203,  202,    0,  203,    0,  203,    0,    0,    0,  202,
        0,    0,  202,  203,  204,  203,  203,  204,    0,  204,
      205,  206,    0,  205,  206,  205,  206,  204,    0,    0,
      204,  204,    0,  205,  206,  205,  205,  206,  206,  207,
      208,  207,    0,  208,  207,  208,  207,    0,    0,    0,
        0,    0,    0,  208,  207,  208,  208,  207,  209,    0,
      209,    0,    0,  209,  210,  209,    0,  210,  210,  210,
        0,    0,    0,  209,    0,    0,  209,  210,  237,    0,
      210,  237,  238,  237,  238,  238,    0,  238,    0,    0,

        0,  237,    0,  237,  237,  238,  239,  240,  238,  239,
      240,  239,  240,  241,    0,    0,  241,    0,  241,  239,
      240,    0,  239,  240,  240,  242,  241,    0,  242,  241,
      242,    0,  243,    0,  243,    0,    0,  243,  242,  243,
      244,  242,  242,  244,    0,  244,  245,  243,    0,  245,
      243,  245,    0,  244,    0,    0,  244,  244,  246,  245,
        0,  246,  245,  246,  247,    0,    0,  247,  245,  247,
      248,  246,    0,  248,  246,  248,  246,  247,    0,  247,
      247,    0,  249,  248,  249,  249,  248,  249,  250,    0,
        0,  250,    0,  250,  251,  249,  251,  251,  249,  251,

      252,  250,    0,  252,  250,  252,  253,  251,    0,  253,
      251,  253,  255,  252,    0,  255,  252,  255,  252,  253,
      254,  254,  253,    0,  254,  255,  254,  256,  255,  255,
      256,    0,  256,  257,  254,    0,  257,  254,  257,    0,
      256,    0,  256,  256,    0,  258,  257,  258,  258,  257,
      258,  259,    0,    0,  259,    0,  259,  260,  258,    0,
      260,  258,  260,  261,  259,    0,  261,  259,  261,    0,
      260,    0,  260,  260,    0,  261,  261,    0,  262,  261,
      262,  263,    0,  262,  263,  262,  263,  264,    0,    0,
      264,    0,  264,  262,  263,    0,  262,  263,    0,    0,

      264,  265,    0,  264,  265,  264,  265,    0,  263,    0,
      265,    0,    0,  266,  265,    0,  266,  265,  266,  267,
        0,    0,  267,    0,  267,  267,  266,    0,  268,  266,
        0,  268,  267,  268,  269,  267,    0,  269,    0,  269,
      270,  268,    0,  270,  268,  270,  270,  269,    0,  271,
      269,    0,  271,  270,  271,  272,  270,    0,  272,    0,
      272,    0,  271,    0,    0,  271,  271,    0,  272,    0,
        0,  272,  273,  273,    0,  273,  274,  273,    0,  274,
        0,  274,  272,    0,    0,  273,    0,    0,  273,  274,
        0,  275,  274,  274,  275,    0,  275,    0,    0,    0,

      275,    0,    0,  276,  275,  276,  276,  275,  276,  299,
        0,    0,  299,    0,  299,  300,  276,  300,  300,  276,
      300,    0,  299,    0,  301,  299,  299,  301,  300,  301,
      302,  300,  302,  302,    0,  302,    0,  301,    0,  301,
      301,    0,  303,  302,    0,  303,  302,  303,  304,  305,
        0,  304,  305,  304,  305,  303,    0,  303,  303,    0,
        0,  304,  305,    0,  304,  305,  306,  306,    0,  306,
      307,  306,    0,  307,    0,  307,    0,    0,    0,  306,
        0,  307,  306,  307,  308,  309,  307,  308,  309,  308,
      309,  310,    0,    0,  310,    0,  310,  308,  309,    0,

      308,  309,  310,    0,  310,  311,  311,  310,  311,  312,
      311,  308,  312,    0,  312,  312,    0,    0,  311,    0,
        0,  311,  312,  313,  314,  312,  313,  314,  313,  314,
      316,    0,    0,  316,    0,  316,  313,  314,    0,  313,
      314,  314,  315,  316,  315,  317,  316,  315,  317,  315,
      317,    0,  316,    0,    0,    0,    0,  315,  317,    0,
      315,  317,  318,  318,    0,  318,  319,  318,    0,  319,
        0,  319,  319,    0,    0,  318,    0,    0,  318,  319,
      320,    0,  319,  320,  321,  320,  321,  322,    0,  321,
      322,  321,  322,  320,    0,    0,  320,  320,    0,  321,

      322,    0,  321,  322,  323,  323,    0,  323,  324,  323,
        0,  324,    0,  324,    0,    0,    0,  323,    0,    0,
      323,  324,  325,  326,  324,  325,  326,  325,  326,    0,
        0,    0,    0,    0,  325,  325,  326,    0,  325,  326,
      327,  327,  328,    0,  327,  328,  327,  328,  329,    0,
        0,  329,  327,  329,  327,  328,    0,  327,  328,    0,
        0,  329,  330,    0,  329,  330,  329,  330,  330,  331,
        0,    0,  331,    0,  331,  330,  350,    0,  330,  350,
        0,  350,  331,    0,    0,  331,  331,    0,    0,  350,
      351,  351,  350,  351,  352,  351,    0,  352,    0,  352,

        0,    0,    0,  351,    0,    0,  351,  352,  353,    0,
      352,  353,  352,  353,  354,  354,    0,  354,    0,  354,
      355,  353,  355,  355,  353,  355,  356,  354,    0,  356,
      354,  356,    0,  355,    0,  353,  355,    0,  357,  356,
        0,  357,  356,  357,  358,    0,    0,  358,    0,  358,
      359,  357,  359,  359,  357,  359,  360,  358,    0,  360,
      358,  360,  361,  359,    0,  361,  359,  361,    0,  360,
        0,  362,  360,  360,  362,  361,  362,  363,  361,    0,
      363,    0,  363,    0,  362,    0,  364,  362,  362,  364,
      363,  364,  365,  363,    0,  365,    0,  365,  366,  364,

        0,  366,  364,  366,  367,  365,    0,  367,  365,  367,
      368,  366,    0,  368,  366,  368,    0,  367,    0,    0,
      367,    0,  369,  368,  369,  369,  368,  369,    0,    0,
        0,  367,  368,    0,  370,  369,    0,  370,  369,  370,
      371,  372,    0,  371,  372,  371,  372,  370,    0,    0,
      370,  371,    0,  371,  372,  373,  371,  372,  373,  374,
      373,  370,  374,  372,  374,    0,    0,  373,  373,    0,
        0,  373,  374,  375,    0,  374,  375,  375,  375,  376,
        0,    0,  376,    0,  376,  393,  375,  393,  393,  375,
      393,  394,  376,    0,  394,  376,  394,  395,  393,    0,

      395,  393,  395,  396,  394,    0,  396,  394,  396,  395,
      395,    0,  397,  395,    0,  397,  396,  397,  398,  396,
        0,  398,    0,  398,  399,  397,    0,  399,  397,  399,
      398,  398,    0,  400,  398,    0,  400,  399,  400,  397,
      399,    0,    0,    0,    0,  401,  400,    0,  401,  400,
      401,  402,  403,    0,  402,  403,  402,  403,  401,    0,
      400,  401,    0,  401,  402,  403,  402,  402,  403,  404,
      405,  404,    0,  405,  404,  405,  404,  406,    0,  403,
      406,    0,  406,  405,  404,    0,  405,  404,    0,    0,
      406,    0,    0,  406,  407,  407,    0,  407,  408,  407,

        0,  408,    0,  408,  406,    0,    0,  407,    0,    0,
      407,  408,  409,  410,  408,  409,  410,  409,  410,    0,
        0,    0,    0,    0,  410,  409,  410,  411,  409,  410,
      411,  412,  411,    0,  412,    0,  412,    0,    0,  409,
      411,    0,  412,  411,  412,  425,  425,  412,  425,  426,
      425,    0,  426,    0,  426,    0,    0,    0,  425,    0,
        0,  425,  426,  427,  427,  426,  426,  427,  428,  427,
        0,  428,    0,  428,    0,    0,    0,  427,    0,    0,
      427,  428,  429,  430,  428,  429,  430,  429,  430,    0,
        0,    0,  429,    0,    0,  429,  430,  431,  429,  430,

      431,  432,  431,  432,  432,    0,  432,    0,    0,    0,
      431,    0,  431,  431,  432,  433,    0,  432,  433,  434,
      433,    0,  434,    0,  434,    0,    0,    0,  433,    0,
      433,  433,  434,  435,  434,  434,  435,  436,  435,    0,
      436,    0,  436,    0,    0,  435,  435,    0,    0,  435,
      436,  437,    0,  436,  437,  438,  437,  437,  438,    0,
      438,    0,    0,    0,  437,    0,    0,  437,  438,    0,
      439,  438,  439,    0,    0,  439,    0,  439,  439,  440,
        0,  440,  440,  439,  440,  439,  441,    0,  439,  441,
        0,  441,  440,  451,    0,  440,  451,    0,  451,  441,

      452,    0,  441,  452,    0,  452,  451,    0,    0,  451,
        0,    0,  452,  452,  453,    0,  452,  453,    0,  453,
      454,  453,    0,  454,    0,  454,  454,  453,    0,  455,
      453,    0,  455,  454,  455,  456,  454,    0,  456,  455,
      456,  457,  455,  457,  457,  455,  457,  456,  456,    0,
      458,  456,    0,  458,  457,  458,  459,  457,    0,  459,
        0,  459,  460,  458,    0,  460,  458,  460,  459,  459,
        0,    0,  459,    0,  461,  460,  459,  461,  460,  461,
      462,    0,    0,  462,    0,  462,  462,  461,    0,  461,
      461,    0,  463,  462,    0,  463,  462,  463,    0,    0,

        0,  464,    0,    0,  464,  463,  464,  463,  463,    0,
      464,    0,    0,  465,  464,    0,  465,  464,  465,    0,
      466,    0,  466,    0,  465,  466,  465,  466,  467,  465,
        0,  467,    0,  467,  474,  466,    0,  474,  466,  474,
      475,  467,  475,  475,  467,  475,    0,  474,    0,  474,
      474,    0,  476,  475,    0,  476,  475,  476,    0,  477,
        0,  476,  477,    0,  477,  476,    0,    0,  476,    0,
        0,  477,  477,  478,  479,  477,  478,  479,  478,  479,
        0,    0,    0,  478,    0,    0,  478,  479,  480,  478,
      479,  480,  481,  480,    0,  481,    0,  481,    0,    0,

        0,  480,    0,    0,  480,  481,  482,  483,  481,  482,
      483,  482,  483,    0,    0,    0,    0,    0,    0,  482,
      483,  484,  482,  483,  484,    0,  484,  485,  485,    0,
      485,  484,  485,  486,  484,    0,  486,  484,  486,  487,
      485,    0,  487,  485,  487,  487,  486,    0,  488,  486,
        0,  488,  487,  488,  488,  487,    0,  489,    0,    0,
      489,  488,  489,  496,  488,    0,  496,  489,  496,  497,
      489,    0,  497,  489,  497,  498,  496,  498,  498,  496,
      498,  499,  497,    0,  499,  497,  499,    0,  498,    0,
      500,  498,  499,  500,  499,  500,  501,  499,    0,  501,

      500,  501,  502,  500,    0,  502,  500,  502,    0,  501,
        0,    0,  501,    0,  503,  502,  503,    0,  502,  503,
        0,  503,  504,  504,    0,  504,    0,  504,    0,  503,
        0,    0,  503,    0,    0,  504,  505,    0,  504,  505,
      505,  505,  506,    0,    0,  506,    0,  506,  507,  505,
      507,  507,  505,  507,    0,  506,    0,  514,  506,  506,
      514,  507,  514,  515,  507,    0,  515,    0,  515,  516,
      514,    0,  516,  514,  516,    0,  515,    0,  517,  515,
      515,  517,  516,  517,  518,  516,    0,  518,    0,  518,
      519,  517,    0,  519,  517,  519,  518,  518,    0,  520,

      518,  520,  520,  519,  520,  517,  519,  519,  521,    0,
        0,  521,  520,  521,    0,  520,    0,  522,    0,  521,
      522,  521,  522,  523,  521,    0,  523,    0,  523,  529,
      522,    0,  529,  522,  529,    0,  523,    0,    0,  523,
        0,    0,  529,    0,  522,  529,  530,  531,  530,    0,
      531,  530,  531,  530,  532,    0,  529,  532,  531,  532,
      531,  530,    0,  531,  530,    0,  533,  532,    0,  533,
      532,  533,    0,  534,    0,    0,  534,  533,  534,  533,
        0,    0,  533,  534,    0,  535,  534,    0,  535,  534,
      535,  541,    0,    0,  541,    0,  541,  542,  535,    0,

      542,  535,  542,    0,  541,    0,  542,  541,    0,  543,
      542,    0,  543,  542,  543,  544,    0,    0,  544,    0,
      544,  545,  543,  545,  545,  543,  545,  546,  544,    0,
      546,  544,  546,    0,  545,    0,  543,  545,    0,    0,
      546,  553,  546,  546,  553,    0,  553,    0,    0,    0,
        0,    0,    0,  554,  553,    0,  554,  553,  554,    0,
        0,    0,  554,  553,    0,  555,  554,  555,  556,  554,
      555,  556,  555,  556,    0,    0,    0,    0,    0,  556,
      555,  556,  557,  555,  556,  557,  561,  557,  557,  561,
        0,  561,    0,    0,    0,  557,  561,    0,  557,  561,

      562,  563,  561,  562,  563,  562,  563,    0,    0,    0,
      563,    0,  562,  562,  563,  564,  562,  563,  564,    0,
      564,  565,    0,    0,  565,    0,  565,    0,  564,    0,
        0,  564,  564,  565,  565,  569,  569,  565,    0,  569,
      570,  569,    0,  570,    0,  570,    0,    0,    0,  569,
        0,    0,  569,  570,  571,  572,  570,  571,  572,  571,
      572,  573,    0,  571,  573,    0,  573,  571,  572,    0,
      571,  572,    0,    0,  573,  576,  573,  573,  576,  577,
      576,  577,    0,    0,  577,    0,  577,  576,  576,    0,
      578,  576,    0,  578,  577,  578,    0,  577,    0,    0,

        0,    0,  578,  578,  579,    0,  578,  579,    0,  579,
      579,    0,    0,  582,    0,    0,  582,  579,  582,    0,
      579,    0,  582,    0,    0,  583,  582,    0,  583,  582,
      583,  584,  585,    0,  584,  585,  584,  585,  583,    0,
        0,  583,  583,    0,  584,  585,    0,  584,  585,  585,
      587,  588,    0,  587,  588,  587,  588,  588,    0,    0,
        0,    0,    0,  587,  588,    0,  587,  588,  589,  590,
      589,    0,  590,  589,  590,  589,  592,    0,    0,  592,
        0,  592,  590,  589,    0,  590,  589,    0,    0,  592,
      593,  590,  592,  593,  594,  593,    0,  594,    0,  594,

        0,    0,  593,  593,    0,    0,  593,  594,    0,  595,
      594,  594,  595,  597,  595,    0,  597,    0,  597,    0,
        0,    0,  595,    0,  597,  595,  597,  598,    0,  597,
      598,  600,  598,  598,  600,    0,  600,    0,    0,    0,
      598,    0,    0,  598,  600,  601,    0,  600,  601,  602,
      601,    0,  602,    0,  602,    0,    0,  601,  601,    0,
      602,  601,  602,  603,    0,  602,  603,    0,  603,    0,
        0,    0,    0,    0,    0,    0,  603,    0,    0,  603,
      605,  605,  605,  605,  605,  606,  606,  606,  606,  607,
      607,  607,  607,  607,  608,  608,  608,  609,  609,  610,

      610,  610,  611,  611,  611,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ScriptScanner.ll"
/*===- ScriptScanner.ll ---------------------------------------------------===//
//
//                     The MCLinker Project
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===*/
#line 11 "ScriptScanner.ll"
/* C/C++ Declarations */

#include <mcld/Script/ScriptFile.h>
#include <mcld/Support/MsgHandling.h>
#include "ScriptScanner.h"
#include <llvm/ADT/StringRef.h>
#include <string>

typedef mcld::ScriptParser::token token;
typedef mcld::ScriptParser::token_type token_type;

#define yyterminate() return token::END
#define YY_NO_UNISTD_H
/* Flex Declarations and Options */
#line 34 "ScriptScanner.ll"
#define YY_USER_ACTION  yylloc->columns(yyleng);
/* abbrev. of RE @ref binutils ld/ldlex.l */
/* Start conditions */


#line 1367 "ScriptScanner.cc"

#define INITIAL 0
#define LDSCRIPT 1
#define EXPRESSION 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 48 "ScriptScanner.ll"


 /* code to place at the beginning of yylex() */

  /* reset location */
  yylloc->step();

  /* determine the initial parser state */
  if (m_Kind == ScriptFile::Unknown) {
    m_Kind = pScriptFile.getKind();
    switch (pScriptFile.getKind()) {
    case ScriptFile::LDScript:
    case ScriptFile::Expression:
      return token::LINKER_SCRIPT;
    case ScriptFile::VersionScript:
    case ScriptFile::DynamicList:
    default:
      assert(0 && "Unsupported script type!");
      break;
    }
  }


 /* Entry Point */
#line 1499 "ScriptScanner.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 605 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 604 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 72 "ScriptScanner.ll"
{ return token::ENTRY; }
	YY_BREAK
/* File Commands */
case 2:
YY_RULE_SETUP
#line 74 "ScriptScanner.ll"
{ return token::INCLUDE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 75 "ScriptScanner.ll"
{ return token::INPUT; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 76 "ScriptScanner.ll"
{ return token::GROUP; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 77 "ScriptScanner.ll"
{ return token::AS_NEEDED; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 78 "ScriptScanner.ll"
{ return token::OUTPUT; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 79 "ScriptScanner.ll"
{ return token::SEARCH_DIR; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 80 "ScriptScanner.ll"
{ return token::STARTUP; }
	YY_BREAK
/* Format Commands */
case 9:
YY_RULE_SETUP
#line 82 "ScriptScanner.ll"
{ return token::OUTPUT_FORMAT; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 83 "ScriptScanner.ll"
{ return token::TARGET; }
	YY_BREAK
/* Misc Commands */
case 11:
YY_RULE_SETUP
#line 85 "ScriptScanner.ll"
{ return token::ASSERT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 86 "ScriptScanner.ll"
{ return token::EXTERN; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 87 "ScriptScanner.ll"
{ return token::FORCE_COMMON_ALLOCATION; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 88 "ScriptScanner.ll"
{ return token::INHIBIT_COMMON_ALLOCATION; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 89 "ScriptScanner.ll"
{ return token::INSERT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 90 "ScriptScanner.ll"
{ return token::NOCROSSREFS; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 91 "ScriptScanner.ll"
{ return token::OUTPUT_ARCH; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 92 "ScriptScanner.ll"
{ return token::LD_FEATURE; }
	YY_BREAK
/* Assignemnts */
case 19:
YY_RULE_SETUP
#line 94 "ScriptScanner.ll"
{ return token::HIDDEN; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 95 "ScriptScanner.ll"
{ return token::PROVIDE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 96 "ScriptScanner.ll"
{ return token::PROVIDE_HIDDEN; }
	YY_BREAK
/* SECTIONS Command */
case 22:
YY_RULE_SETUP
#line 98 "ScriptScanner.ll"
{ return token::SECTIONS; }
	YY_BREAK
/* MEMORY Command */
case 23:
YY_RULE_SETUP
#line 100 "ScriptScanner.ll"
{ return token::MEMORY; }
	YY_BREAK
/* PHDRS Command */
case 24:
YY_RULE_SETUP
#line 102 "ScriptScanner.ll"
{ return token::PHDRS; }
	YY_BREAK
/* Builtin Functions */
case 25:
YY_RULE_SETUP
#line 104 "ScriptScanner.ll"
{ return token::ABSOLUTE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 105 "ScriptScanner.ll"
{ return token::ADDR; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 106 "ScriptScanner.ll"
{ return token::ALIGN; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 107 "ScriptScanner.ll"
{ return token::ALIGNOF; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 108 "ScriptScanner.ll"
{ return token::BLOCK; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 109 "ScriptScanner.ll"
{ return token::DATA_SEGMENT_ALIGN; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 110 "ScriptScanner.ll"
{ return token::DATA_SEGMENT_END; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 111 "ScriptScanner.ll"
{ return token::DATA_SEGMENT_RELRO_END; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 112 "ScriptScanner.ll"
{ return token::DEFINED; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 113 "ScriptScanner.ll"
{ return token::LENGTH; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 114 "ScriptScanner.ll"
{ return token::LOADADDR; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 115 "ScriptScanner.ll"
{ return token::MAX; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 116 "ScriptScanner.ll"
{ return token::MIN; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 117 "ScriptScanner.ll"
{ return token::NEXT; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 118 "ScriptScanner.ll"
{ return token::ORIGIN; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 119 "ScriptScanner.ll"
{ return token::SEGMENT_START; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 120 "ScriptScanner.ll"
{ return token::SIZEOF; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 121 "ScriptScanner.ll"
{ return token::SIZEOF_HEADERS; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 122 "ScriptScanner.ll"
{ return token::CONSTANT; }
	YY_BREAK
/* Symbolic Constants */
case 44:
YY_RULE_SETUP
#line 124 "ScriptScanner.ll"
{ return token::MAXPAGESIZE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 125 "ScriptScanner.ll"
{ return token::COMMONPAGESIZE; }
	YY_BREAK
/* Input Section Description */
case 46:
YY_RULE_SETUP
#line 127 "ScriptScanner.ll"
{ return token::EXCLUDE_FILE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 128 "ScriptScanner.ll"
{ return token::KEEP; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 129 "ScriptScanner.ll"
{ return token::SORT_BY_NAME; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 130 "ScriptScanner.ll"
{ return token::SORT_BY_NAME; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 131 "ScriptScanner.ll"
{ return token::SORT_BY_ALIGNMENT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 132 "ScriptScanner.ll"
{ return token::SORT_NONE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 133 "ScriptScanner.ll"
{ return token::SORT_BY_INIT_PRIORITY; }
	YY_BREAK
/* Output Section Data */
case 53:
YY_RULE_SETUP
#line 135 "ScriptScanner.ll"
{ return token::BYTE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 136 "ScriptScanner.ll"
{ return token::SHORT; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 137 "ScriptScanner.ll"
{ return token::LONG; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 138 "ScriptScanner.ll"
{ return token::QUAD; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 139 "ScriptScanner.ll"
{ return token::SQUAD; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 140 "ScriptScanner.ll"
{ return token::FILL; }
	YY_BREAK
/* Output Section Discarding */
case 59:
YY_RULE_SETUP
#line 142 "ScriptScanner.ll"
{ return token::DISCARD; }
	YY_BREAK
/* Output Section Keywords */
case 60:
YY_RULE_SETUP
#line 144 "ScriptScanner.ll"
{ return token::CREATE_OBJECT_SYMBOLS; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 145 "ScriptScanner.ll"
{ return token::CONSTRUCTORS; }
	YY_BREAK
/* Output Section Attributes */
/* Output Section Type */
case 62:
YY_RULE_SETUP
#line 148 "ScriptScanner.ll"
{ return token::NOLOAD; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 149 "ScriptScanner.ll"
{ return token::DSECT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 150 "ScriptScanner.ll"
{ return token::COPY; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 151 "ScriptScanner.ll"
{ return token::INFO; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 152 "ScriptScanner.ll"
{ return token::OVERLAY; }
	YY_BREAK
/* Output Section LMA */
case 67:
YY_RULE_SETUP
#line 154 "ScriptScanner.ll"
{ return token::AT; }
	YY_BREAK
/* Forced Input Alignment */
case 68:
YY_RULE_SETUP
#line 156 "ScriptScanner.ll"
{ return token::SUBALIGN; }
	YY_BREAK
/* Output Section Constraint */
case 69:
YY_RULE_SETUP
#line 158 "ScriptScanner.ll"
{ return token::ONLY_IF_RO; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 159 "ScriptScanner.ll"
{ return token::ONLY_IF_RW; }
	YY_BREAK
/* Operators */
case 71:
YY_RULE_SETUP
#line 161 "ScriptScanner.ll"
{ return token::LSHIFT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 162 "ScriptScanner.ll"
{ return token::RSHIFT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 163 "ScriptScanner.ll"
{ return token::EQ; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 164 "ScriptScanner.ll"
{ return token::NE; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 165 "ScriptScanner.ll"
{ return token::LE; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 166 "ScriptScanner.ll"
{ return token::GE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 167 "ScriptScanner.ll"
{ return token::LOGICAL_AND; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 168 "ScriptScanner.ll"
{ return token::LOGICAL_OR; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 169 "ScriptScanner.ll"
{ return token::ADD_ASSIGN; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 170 "ScriptScanner.ll"
{ return token::SUB_ASSIGN; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 171 "ScriptScanner.ll"
{ return token::MUL_ASSIGN; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 172 "ScriptScanner.ll"
{ return token::DIV_ASSIGN; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 173 "ScriptScanner.ll"
{ return token::AND_ASSIGN; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 174 "ScriptScanner.ll"
{ return token::OR_ASSIGN; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 175 "ScriptScanner.ll"
{ return token::LS_ASSIGN; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 176 "ScriptScanner.ll"
{ return token::RS_ASSIGN; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 177 "ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 178 "ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 179 "ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 180 "ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 181 "ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 182 "ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 183 "ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 184 "ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 185 "ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 186 "ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 187 "ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 188 "ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 189 "ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 190 "ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 191 "ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 192 "ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 193 "ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 194 "ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 195 "ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 196 "ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 197 "ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
/* Numbers */
case 108:
YY_RULE_SETUP
#line 200 "ScriptScanner.ll"
{
  llvm::StringRef str(yytext, yyleng);
  switch (str.back()) {
  case 'k':
  case 'K':
    str.substr(0, yyleng - 1).getAsInteger(0, yylval->integer);
    yylval->integer *= 1024;
    break;
  case 'm':
  case 'M':
    str.substr(0, yyleng - 1).getAsInteger(0, yylval->integer);
    yylval->integer *= 1024 * 1024;
    break;
  default:
    str.getAsInteger(0, yylval->integer);
    break;
  }
  return token::INTEGER;
}
	YY_BREAK
/* Expression string */
case 109:
YY_RULE_SETUP
#line 221 "ScriptScanner.ll"
{
  const std::string& str = pScriptFile.createParserStr(yytext, yyleng);
  yylval->string = &str;
  return token::STRING;
}
	YY_BREAK
/* String */
case 110:
YY_RULE_SETUP
#line 228 "ScriptScanner.ll"
{
  const std::string& str = pScriptFile.createParserStr(yytext, yyleng);
  yylval->string = &str;
  return token::STRING;
}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 234 "ScriptScanner.ll"
{
  /*" c string literal */
  const std::string& str = pScriptFile.createParserStr(yytext, yyleng);
  yylval->string = &str;
  return token::STRING;
}
	YY_BREAK
/* -l namespec */
case 112:
YY_RULE_SETUP
#line 242 "ScriptScanner.ll"
{
  const std::string& str = pScriptFile.createParserStr(yytext + 2, yyleng - 2);
  yylval->string = &str;
  return token::LNAMESPEC;
}
	YY_BREAK
/* WILDCHAR String */
case 113:
YY_RULE_SETUP
#line 249 "ScriptScanner.ll"
{
  if (yytext[0] == '/' && yytext[1] == '*') {
    yyless (2);
    enterComments(*yylloc);
  } else {
    const std::string& str = pScriptFile.createParserStr(yytext, yyleng);
    yylval->string = &str;
    return token::STRING;
  }
}
	YY_BREAK
/* gobble up C comments */
case 114:
YY_RULE_SETUP
#line 261 "ScriptScanner.ll"
{
  enterComments(*yylloc);
  yylloc->step();
}
	YY_BREAK
/* gobble up white-spaces */
case 115:
YY_RULE_SETUP
#line 267 "ScriptScanner.ll"
{
  yylloc->step();
}
	YY_BREAK
/* gobble up end-of-lines */
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 272 "ScriptScanner.ll"
{
  yylloc->lines(1);
  yylloc->step();
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 277 "ScriptScanner.ll"
ECHO;
	YY_BREAK
#line 2244 "ScriptScanner.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(LDSCRIPT):
case YY_STATE_EOF(EXPRESSION):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 605 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 605 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 604);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 277 "ScriptScanner.ll"



namespace mcld {

ScriptScanner::ScriptScanner(std::istream* yyin, std::ostream* yyout)
  : yyFlexLexer(yyin, yyout), m_Kind(ScriptFile::Unknown)
{
}

ScriptScanner::~ScriptScanner()
{
}

void ScriptScanner::enterComments(ScriptParser::location_type& pLocation)
{
  const int start_line = pLocation.begin.line;
  const int start_col  = pLocation.begin.column;

  int ch = 0;

  while (true) {
    ch = yyinput();
    pLocation.columns(1);

    while (ch != '*' && ch != EOF) {
      if (ch == '\n') {
        pLocation.lines(1);
      }

      ch = yyinput();
      pLocation.columns(1);
    }

    if (ch == '*') {
      ch = yyinput();
      pLocation.columns(1);

      while (ch == '*') {
        ch = yyinput();
        pLocation.columns(1);
      }

      if (ch == '/')
        break;
    }

    if (ch == '\n')
      pLocation.lines(1);

    if (ch == EOF) {
      error(diag::err_unterminated_comment) << pLocation.begin.filename
                                            << start_line
                                            << start_col;
      break;
    }
  }
}

void ScriptScanner::setLexState(ScriptFile::Kind pKind)
{
  /* push the state into the top of stach */
  m_StateStack.push(pKind);

  switch (pKind) {
  case ScriptFile::LDScript:
    BEGIN(LDSCRIPT);
    break;
  case ScriptFile::Expression:
    BEGIN(EXPRESSION);
    break;
  case ScriptFile::VersionScript:
  case ScriptFile::DynamicList:
  default:
    assert(0 && "Unsupported script type!");
    break;
  }
}

void ScriptScanner::popLexState()
{
  /* pop the last state */
  m_StateStack.pop();

  /* resume the appropriate state */
  if (!m_StateStack.empty()) {
    switch (m_StateStack.top()) {
    case ScriptFile::LDScript:
      BEGIN(LDSCRIPT);
      break;
    case ScriptFile::Expression:
      BEGIN(EXPRESSION);
      break;
    case ScriptFile::VersionScript:
    case ScriptFile::DynamicList:
    default:
      assert(0 && "Unsupported script type!");
      break;
    }
  }
}

} /* namespace of mcld */

#ifdef yylex
#undef yylex
#endif

int yyFlexLexer::yylex()
{
  return 0;
}


